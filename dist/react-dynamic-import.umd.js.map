{"version":3,"file":"react-dynamic-import.umd.js","sources":["../src/index.js"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { Component, forwardRef } from \"react\";\n\nconst defaultErrorHandler = ({ name, error: { message } }) =>\n  `Failed to fetch dynamic module: ${name}.\\nError: ${message}.`;\n\nconst defaultPlaceholder = () => null;\n\n/**\n * Dynamically load any react module(Component or an HOC)\n *\n * @example\n *  - Module loader function\n *      const loader = f => import(`./dynamic/${f}.js`);\n *  - Use dynamic module(Make sure to use it outside render method, else new component is rendered in each render)\n *      const RealComponent = DynamicImport({ name: 'realModuleName', loader }),\n *\n * @param {Object} options - Options passed to react dynamic import functions\n * @param {Function} options.loader - function which takes module name and returns promise\n * @param {Boolean} [options.isHOC=false] - Is the module a HOC?\n * @param {String} [options.name] - Dynamic module to be fetched(Mostly it will be part of the module file name),\n *                                        optional if loader returns same component every time\n * @param {Component} [options.placeholder=defaultPlaceholder] - React component to be rendered until actual module is fetched\n *                                                               (You can add UX improvements like adding small delay before showing\n *                                                               loader inside your class/functional component)\n * @param {Component} [options.errorHandler=defaultErrorHandler] - React component to be rendered if fetching actual module fails.\n *                                                                 This will receive `name` and `error` object as `props`\n */\nconst DynamicImportWrapper = ({\n  loader,\n  isHOC = false,\n  name,\n  placeholder: DefaultPlaceholder = defaultPlaceholder,\n  errorHandler: ErrorHandler = defaultErrorHandler\n}) => {\n  if (!loader || (loader && typeof loader !== \"function\")) {\n    throw new Error(\"'loader' is required and should be of type 'function'.\");\n  }\n\n  class DynamicImport extends Component {\n    static displayName = `DynamicImport${isHOC ? \":HOC\" : \"\"}(${name || \"?\"})`;\n\n    isMounted = false;\n\n    state = {\n      DynamicComponent: null,\n      fetchError: null\n    };\n\n    componentDidMount() {\n      this.isMounted = true;\n      const loaderPromise = loader(name);\n\n      if (\n        !loaderPromise ||\n        (loaderPromise && !(loaderPromise instanceof Promise))\n      ) {\n        throw new Error(\n          `Expected 'loader' to return a 'Promise', it returned '${typeof loaderPromise}' instead.`\n        );\n      }\n\n      loader(name)\n        .then(mod => {\n          const { hocArgs } = this.props;\n          const m = mod.default || mod;\n\n          if (this.isMounted) {\n            this.setState({\n              DynamicComponent: isHOC ? m(...hocArgs) : m\n            });\n          }\n        })\n        .catch(fetchError => {\n          this.setState({ fetchError });\n        });\n    }\n\n    componentWillUnmount() {\n      this.isMounted = false;\n    }\n\n    render() {\n      const { DynamicComponent, fetchError } = this.state;\n      const { hocArgs, forwardedRef, ...props } = this.props;\n\n      if (fetchError) {\n        return <ErrorHandler error={fetchError} name={name} />;\n      }\n\n      return DynamicComponent ? (\n        <DynamicComponent {...props} ref={forwardedRef} />\n      ) : (\n        <DefaultPlaceholder name={name} />\n      );\n    }\n  }\n\n  return isHOC\n    ? (...args) =>\n        forwardRef(function DynamicImportHOCFetcher(props, ref) {\n          return <DynamicImport {...props} forwardedRef={ref} hocArgs={args} />;\n        })\n    : forwardRef(function DynamicImportFetcher(props, ref) {\n        return <DynamicImport {...props} forwardedRef={ref} />;\n      });\n};\n\nexport default DynamicImportWrapper;\n"],"names":["defaultErrorHandler","name","message","error","defaultPlaceholder","loader","isHOC","placeholder","DefaultPlaceholder","errorHandler","ErrorHandler","Error","DynamicImport","DynamicComponent","fetchError","Component","isMounted","loaderPromise","Promise","then","mod","hocArgs","_this2","props","m","default","setState","catch","this","state","forwardedRef","React","ref","args","forwardRef"],"mappings":"8/DAGA,IAAMA,EAAsB,gBAAGC,IAAAA,KAAeC,IAATC,MAASD,wDACTD,uBAAiBC,QAEhDE,EAAqB,kBAAM,aAsBJ,gBAC3BC,IAAAA,WACAC,MAAAA,gBACAL,IAAAA,SACAM,YAAaC,aAAqBJ,QAClCK,aAAcC,aAAeV,QAExBK,GAAWA,GAA4B,mBAAXA,QACzB,IAAIM,MAAM,8DAGZC,wVAGQ,qBAEJ,CACNC,iBAAkB,KAClBC,WAAY,6PAPYC,0FAWnBC,WAAY,MACXC,EAAgBZ,EAAOJ,OAG1BgB,GACAA,KAAmBA,aAAyBC,eAEvC,IAAIP,wEACwDM,kBAIpEZ,EAAOJ,GACJkB,KAAK,SAAAC,OACIC,EAAYC,EAAKC,MAAjBF,QACFG,EAAIJ,EAAIK,SAAWL,EAErBE,EAAKN,WACPM,EAAKI,SAAS,CACZb,iBAAkBP,EAAQkB,iBAAKH,IAAWG,MAI/CG,MAAM,SAAAb,GACLQ,EAAKI,SAAS,CAAEZ,WAAAA,0DAKfE,WAAY,yCAIwBY,KAAKC,MAAtChB,IAAAA,iBAAkBC,IAAAA,aACkBc,KAAKL,MAAhCO,KAATT,UAASS,cAAiBP,yCAE9BT,EACKiB,gBAACrB,GAAaP,MAAOW,EAAYb,KAAMA,IAGzCY,EACLkB,gBAAClB,OAAqBU,GAAOS,IAAKF,KAElCC,gBAACvB,GAAmBP,KAAMA,gCAtD1BW,uCACiCN,EAAQ,OAAS,eAAML,GAAQ,UA0D/DK,EACH,sCAAI2B,2BAAAA,yBACFC,aAAW,SAAiCX,EAAOS,UAC1CD,gBAACnB,OAAkBW,GAAOO,aAAcE,EAAKX,QAASY,QAEjEC,aAAW,SAA8BX,EAAOS,UACvCD,gBAACnB,OAAkBW,GAAOO,aAAcE"}