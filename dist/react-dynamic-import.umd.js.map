{"version":3,"file":"react-dynamic-import.umd.js","sources":["../src/index.js"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport * as React from 'react';\n\nconst defaultErrorHandler = ({ name, error: { message } }) =>\n  `Unable to fetch module: ${name}.\\nError: ${message}.`;\n\nconst defaultPlaceholder = () => null;\n\n/**\n * Dynamically load any react module(Component or an HOC)\n *\n * @example\n *  - Module loader function\n *      const loader = f => import(`./dynamic/${f}.js`);\n *  - Use dynamic module(Make sure to use it outside render method, else new component is rendered in each render)\n *      const RealComponent = DynamicImport({ name: 'realModuleName', loader }),\n *\n * @param {Object} options - Options passed to react dynamic import functions\n * @param {Function} options.loader - function which takes module name and returns promise to resolve module\n * @param {Boolean} [options.isHOC=false] - Is the module an HOC?\n * @param {String} [options.name] - Dynamic module to be fetched(Mostly it will be part of the module file name),\n *                                        optional if loader returns same component every time\n * @param {Component} [options.placeholder=defaultPlaceholder] - React component to be rendered until actual module is fetched\n *                                                               (You can add UX improvements like adding small delay before showing\n *                                                               loader inside your class/functional component)\n * @param {Component} [options.errorHandler=defaultErrorHandler] - React component to be rendered if fetching actual module fails.\n *                                                                 This will receive `name` and `error` object as `props`\n */\nconst DynamicImportWrapper = ({\n  loader,\n  isHOC = false,\n  name,\n  placeholder: Placeholder = defaultPlaceholder,\n  errorHandler: ErrorHandler = defaultErrorHandler,\n}) => {\n  if (!loader || (loader && typeof loader !== 'function')) {\n    throw new Error(\"'loader' is required and should be of type 'function'.\");\n  }\n\n  function DynamicImport(props) {\n    const isMounted = React.useRef(false);\n    const [DynamicModule, setDynamicModule] = React.useState(null);\n    const [fetchError, setFetchError] = React.useState(null);\n    const { hocArgs, forwardedRef, ...rest } = props;\n\n    React.useEffect(() => {\n      isMounted.current = true;\n      const loaderPromise = loader(name);\n\n      if (\n        !loaderPromise ||\n        (loaderPromise && !(loaderPromise instanceof Promise))\n      ) {\n        throw new Error(\n          `Expected 'loader' to return a 'Promise', but, it returned '${typeof loaderPromise}' instead.`,\n        );\n      }\n\n      // Async await increases the bundle size\n      loaderPromise\n        .then(mod => {\n          if (isMounted.current) {\n            const m = mod.default || mod;\n\n            // useState executes the function if functional component is passed\n            setDynamicModule({ component: isHOC ? m(...hocArgs) : m });\n          }\n        })\n        .catch(err => {\n          if (isMounted.current) {\n            setFetchError(err);\n          }\n        });\n\n      return () => {\n        isMounted.current = false;\n      };\n    }, [hocArgs]);\n\n    if (fetchError) {\n      return <ErrorHandler error={fetchError} name={name} />;\n    }\n\n    return DynamicModule ? (\n      <DynamicModule.component {...rest} ref={forwardedRef} />\n    ) : (\n      <Placeholder name={name} />\n    );\n  }\n\n  DynamicImport.displayName = `DynamicImport${isHOC ? ':HOC' : ''}(${name ||\n    'Unknown'})`;\n\n  function DynamicImportFetcher(props, ref) {\n    return <DynamicImport {...props} forwardedRef={ref} />;\n  }\n  DynamicImportFetcher.displayName = 'DynamicImportFetcher';\n\n  const ComponentFetcher = React.forwardRef(DynamicImportFetcher);\n\n  const HOCFetcher = (...args) => {\n    function DynamicImportHOCFetcher(props, ref) {\n      return <DynamicImport {...props} forwardedRef={ref} hocArgs={args} />;\n    }\n    DynamicImportHOCFetcher.displayName = 'DynamicImportHOCFetcher';\n\n    return React.forwardRef(DynamicImportHOCFetcher);\n  };\n\n  return isHOC ? HOCFetcher : ComponentFetcher;\n};\n\nexport default DynamicImportWrapper;\n"],"names":["defaultErrorHandler","name","message","error","defaultPlaceholder","loader","isHOC","placeholder","Placeholder","errorHandler","ErrorHandler","Error","DynamicImport","props","isMounted","React","DynamicModule","setDynamicModule","fetchError","setFetchError","hocArgs","forwardedRef","rest","current","loaderPromise","Promise","then","mod","m","component","err","React.createElement","ref","DynamicImportFetcher","displayName","ComponentFetcher","args","DynamicImportHOCFetcher"],"mappings":"81DAGA,IAAMA,EAAsB,gBAAGC,IAAAA,KAAeC,IAATC,MAASD,gDACjBD,uBAAiBC,QAExCE,EAAqB,kBAAM,aAsBJ,gBAC3BC,IAAAA,WACAC,MAAAA,gBACAL,IAAAA,SACAM,YAAaC,aAAcJ,QAC3BK,aAAcC,aAAeV,QAExBK,GAAWA,GAA4B,mBAAXA,QACzB,IAAIM,MAAM,mEAGTC,EAAcC,OACfC,EAAYC,UAAa,OACWA,WAAe,SAAlDC,OAAeC,WACcF,WAAe,SAA5CG,OAAYC,OACXC,EAAmCP,EAAnCO,QAASC,EAA0BR,EAA1BQ,aAAiBC,IAAST,qCAE3CE,aAAgB,WACdD,EAAUS,SAAU,MACdC,EAAgBnB,EAAOJ,OAG1BuB,GACAA,KAAmBA,aAAyBC,eAEvC,IAAId,6EAC6Da,yBAKzEA,EACGE,MAAK,SAAAC,MACAb,EAAUS,QAAS,KACfK,EAAID,WAAeA,EAGzBV,EAAiB,CAAEY,UAAWvB,EAAQsB,iBAAKR,IAAWQ,eAGnD,SAAAE,GACDhB,EAAUS,SACZJ,EAAcW,MAIb,WACLhB,EAAUS,SAAU,KAErB,CAACH,IAEAF,EACKa,gBAACrB,GAAaP,MAAOe,EAAYjB,KAAMA,IAGzCe,EACLe,gBAACf,EAAca,eAAcP,GAAMU,IAAKX,KAExCU,gBAACvB,GAAYP,KAAMA,aAOdgC,EAAqBpB,EAAOmB,UAC5BD,gBAACnB,OAAkBC,GAAOQ,aAAcW,KAJjDpB,EAAcsB,mCAA8B5B,EAAQ,OAAS,eAAML,GACjE,eAKFgC,EAAqBC,YAAc,2BAE7BC,EAAmBpB,aAAiBkB,UAWnC3B,EATY,sCAAI8B,2BAAAA,2BACZC,EAAwBxB,EAAOmB,UAC/BD,gBAACnB,OAAkBC,GAAOQ,aAAcW,EAAKZ,QAASgB,YAE/DC,EAAwBH,YAAc,0BAE/BnB,aAAiBsB,IAGEF"}