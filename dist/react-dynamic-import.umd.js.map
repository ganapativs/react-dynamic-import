{"version":3,"file":"react-dynamic-import.umd.js","sources":["../src/index.js"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { forwardRef, useRef, useState, useEffect } from \"react\";\n\nconst defaultErrorHandler = ({ name, error: { message } }) =>\n  `Failed to fetch dynamic module: ${name}.\\nError: ${message}.`;\n\nconst defaultPlaceholder = () => null;\n\n/**\n * Dynamically load any react module(Component or an HOC)\n *\n * @example\n *  - Module loader function\n *      const loader = f => import(`./dynamic/${f}.js`);\n *  - Use dynamic module(Make sure to use it outside render method, else new component is rendered in each render)\n *      const RealComponent = DynamicImport({ name: 'realModuleName', loader }),\n *\n * @param {Object} options - Options passed to react dynamic import functions\n * @param {Function} options.loader - function which takes module name and returns promise\n * @param {Boolean} [options.isHOC=false] - Is the module a HOC?\n * @param {String} [options.name] - Dynamic module to be fetched(Mostly it will be part of the module file name),\n *                                        optional if loader returns same component every time\n * @param {Component} [options.placeholder=defaultPlaceholder] - React component to be rendered until actual module is fetched\n *                                                               (You can add UX improvements like adding small delay before showing\n *                                                               loader inside your class/functional component)\n * @param {Component} [options.errorHandler=defaultErrorHandler] - React component to be rendered if fetching actual module fails.\n *                                                                 This will receive `name` and `error` object as `props`\n */\nconst DynamicImportWrapper = ({\n  loader,\n  isHOC = false,\n  name,\n  placeholder: DefaultPlaceholder = defaultPlaceholder,\n  errorHandler: ErrorHandler = defaultErrorHandler\n}) => {\n  if (!loader || (loader && typeof loader !== \"function\")) {\n    throw new Error(\"'loader' is required and should be of type 'function'.\");\n  }\n\n  function DynamicImport(props) {\n    const isMounted = useRef(false);\n    const [DynamicComponent, setDynamicComponent] = useState(null);\n    const [fetchError, setFetchError] = useState(null);\n    const { hocArgs, forwardedRef, ...rest } = props;\n\n    useEffect(() => {\n      isMounted.current = true;\n      const loaderPromise = loader(name);\n\n      if (\n        !loaderPromise ||\n        (loaderPromise && !(loaderPromise instanceof Promise))\n      ) {\n        throw new Error(\n          `Expected 'loader' to return a 'Promise', it returned '${typeof loaderPromise}' instead.`\n        );\n      }\n\n      // Async await increases the bundle size\n      loader(name)\n        .then(mod => {\n          if (isMounted.current) {\n            const { hocArgs: args } = props;\n            const m = mod.default || mod;\n\n            // useState executes the function if functional component is passed\n            setDynamicComponent({ component: isHOC ? m(...args) : m });\n          }\n        })\n        .catch(err => {\n          setFetchError(err);\n        });\n\n      return () => {\n        isMounted.current = false;\n      };\n    }, []);\n\n    if (fetchError) {\n      return <ErrorHandler error={fetchError} name={name} />;\n    }\n\n    return DynamicComponent ? (\n      <DynamicComponent.component {...rest} ref={forwardedRef} />\n    ) : (\n      <DefaultPlaceholder name={name} />\n    );\n  }\n\n  DynamicImport.displayName = `DynamicImport${isHOC ? \":HOC\" : \"\"}(${name ||\n    \"Unknown\"})`;\n\n  function DynamicImportFetcher(props, ref) {\n    return <DynamicImport {...props} forwardedRef={ref} />;\n  }\n  DynamicImportFetcher.displayName = \"DynamicImportFetcher\";\n\n  const ComponentFetcher = forwardRef(DynamicImportFetcher);\n\n  const HOCFetcher = (...args) => {\n    function DynamicImportHOCFetcher(props, ref) {\n      return <DynamicImport {...props} forwardedRef={ref} hocArgs={args} />;\n    }\n    DynamicImportHOCFetcher.displayName = \"DynamicImportHOCFetcher\";\n\n    return forwardRef(DynamicImportHOCFetcher);\n  };\n\n  return isHOC ? HOCFetcher : ComponentFetcher;\n};\n\nexport default DynamicImportWrapper;\n"],"names":["defaultErrorHandler","name","message","error","defaultPlaceholder","loader","isHOC","placeholder","DefaultPlaceholder","errorHandler","ErrorHandler","Error","DynamicImport","props","isMounted","useRef","useState","DynamicComponent","setDynamicComponent","fetchError","setFetchError","forwardedRef","hocArgs","rest","useEffect","current","loaderPromise","Promise","then","mod","args","m","component","err","React","ref","DynamicImportFetcher","displayName","ComponentFetcher","forwardRef","DynamicImportHOCFetcher"],"mappings":"0xDAG4B,SAAtBA,SAAyBC,IAAAA,KAAeC,IAATC,MAASD,wDACTD,uBAAiBC,OAE3B,SAArBE,WAA2B,YAsBJ,gBAC3BC,IAAAA,WACAC,MAAAA,gBACAL,IAAAA,SACAM,YAAaC,aAAqBJ,QAClCK,aAAcC,aAAeV,QAExBK,GAAWA,GAA4B,mBAAXA,QACzB,IAAIM,MAAM,mEAGTC,EAAcC,OACfC,EAAYC,UAAO,OACuBC,WAAS,SAAlDC,OAAkBC,WACWF,WAAS,SAAtCG,OAAYC,OACFC,GAA0BR,EAAnCS,QAAmCT,EAA1BQ,cAAiBE,IAASV,qCAE3CW,YAAU,WACRV,EAAUW,SAAU,MACdC,EAAgBrB,EAAOJ,OAG1ByB,GACAA,KAAmBA,aAAyBC,eAEvC,IAAIhB,wEACwDe,yBAKpErB,EAAOJ,GACJ2B,KAAK,SAAAC,MACAf,EAAUW,QAAS,KACJK,EAASjB,EAAlBS,QACFS,EAAIF,WAAeA,EAGzBX,EAAoB,CAAEc,UAAW1B,EAAQyB,iBAAKD,IAAQC,aAGnD,SAAAE,GACLb,EAAca,KAGX,WACLnB,EAAUW,SAAU,IAErB,IAECN,EACKe,gBAACxB,GAAaP,MAAOgB,EAAYlB,KAAMA,IAGzCgB,EACLiB,gBAACjB,EAAiBe,eAAcT,GAAMY,IAAKd,KAE3Ca,gBAAC1B,GAAmBP,KAAMA,aAOrBmC,EAAqBvB,EAAOsB,UAC5BD,gBAACtB,OAAkBC,GAAOQ,aAAcc,KAJjDvB,EAAcyB,mCAA8B/B,EAAQ,OAAS,eAAML,GACjE,eAKFmC,EAAqBC,YAAc,2BAE7BC,EAAmBC,aAAWH,UAW7B9B,EATY,sCAAIwB,2BAAAA,2BACZU,EAAwB3B,EAAOsB,UAC/BD,gBAACtB,OAAkBC,GAAOQ,aAAcc,EAAKb,QAASQ,YAE/DU,EAAwBH,YAAc,0BAE/BE,aAAWC,IAGQF"}